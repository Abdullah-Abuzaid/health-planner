// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthUser {
  Id        String   @id @default(uuid())
  email     String   @unique
  password  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  salt      String
  user      User?
}

model User {
  Id             String    @id @default(uuid())
  firstname      String
  lastname       String?
  phone          String
  dateOfBirth    DateTime
  bio            String?
  gender         Gender
  diagnosis      String?
  address        String
  healthBarriers String[]  @default([""]) //leave epmty for doctor. used for patients only
  avatarUrl      String?
  timezone       String?
  language       Language  @default(EN)
  year           Int?
  roles          Role      @default(PATIENT)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastActiveAt   DateTime?
  authUser       AuthUser? @relation(fields: [authUserId], references: [Id])
  authUserId     String?   @unique

  email            String            @unique
  medicalHistory   MedicalHistory?
  userMedications  UserMedications?
  userMeasurements UserMeasurements?

  Event Event?
}

enum Gender {
  MALE
  FEMALE
}

enum Language {
  EN
  Arabic
  // Add other languages as needed
}

enum Role {
  PATIENT
  DOCTOR
}

model MedicalHistory {
  Id          String    @id @default(uuid())
  historyName String
  diseases    Disease[] @relation("MedicalHistoryDisease")
  medicalHistoryDiseases MedicalHistoryDisease[]
  user        User      @relation(fields: [userId], references: [Id])
  userId      String    @unique
}

model Disease {
  Id          String           @id @default(uuid())
  diseaseName String
   medicalHistoryDiseases MedicalHistoryDisease[] 
  histories   MedicalHistory[] @relation("MedicalHistoryDisease")
  description String?
}

model Medications {
  Id                   String            @id @default(uuid())
  medicationName       String
  status               Status
  dosage               String
  frequency            String
  prescribingPhysician String // Foreign key for user; need to define a user model
  startDate            DateTime
  endDate              DateTime?
  userMedications      UserMedications[]
}

model UserMedications {
  Id          String        @id @default(uuid())
  user        User          @relation(fields: [userId], references: [Id])
  userId      String        @unique
  medications Medications[]
}

model Measurements {
  Id                 String           @id @default(uuid())
  name               String
  icon               String
  measurementType    MeasurementType
  measurementValue   Int
  measurementUnit    String
  measuredOn         DateTime
  createdAt          DateTime         @default(now())
  UserMeasurements   UserMeasurements @relation(fields: [userMeasurementsID], references: [Id])
  userMeasurementsID String           @unique
}

model UserMeasurements {
  Id           String         @id @default(uuid())
  user         User           @relation(fields: [userId], references: [Id])
  userId       String         @unique
  measurements Measurements[]
}

model Event {
  Id     String   @id @default(uuid())
  user   User     @relation(fields: [userId], references: [Id])
  userId String   @unique
  date   DateTime
  name   String
}

enum MeasurementType {
  weight
  blood_pressure_systolic
  blood_pressure_diastolic
  BMI
}

enum Status {
  Active
  Discontuned
  On_Hold
}

model MedicalHistoryDisease {
  medicalHistoryId String
  diseaseId        String
  medicalHistory   MedicalHistory @relation(fields: [medicalHistoryId], references: [Id])
  disease          Disease        @relation(fields: [diseaseId], references: [Id])
  @@id([medicalHistoryId, diseaseId])
}